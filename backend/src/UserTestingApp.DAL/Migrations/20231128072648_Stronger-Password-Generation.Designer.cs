// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserTestingApp.DAL.Context;

#nullable disable

namespace UserTestingApp.DAL.Migrations
{
    [DbContext(typeof(UserTestingAppContext))]
    [Migration("20231128072648_Stronger-Password-Generation")]
    partial class StrongerPasswordGeneration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UserTestingApp.DAL.Entities.AssignedTest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Mark")
                        .HasColumnType("float");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("AssignedTests");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateCompleted = new DateTime(2022, 12, 24, 15, 58, 35, 193, DateTimeKind.Local).AddTicks(7230),
                            Mark = 3.0,
                            TestId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            TestId = 2L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            DateCompleted = new DateTime(2022, 12, 14, 4, 49, 57, 324, DateTimeKind.Local).AddTicks(7250),
                            Mark = 3.0,
                            TestId = 3L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            TestId = 4L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            DateCompleted = new DateTime(2023, 11, 12, 17, 0, 59, 849, DateTimeKind.Local).AddTicks(4126),
                            Mark = 3.0,
                            TestId = 5L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            TestId = 6L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            DateCompleted = new DateTime(2023, 5, 13, 10, 19, 8, 659, DateTimeKind.Local).AddTicks(1954),
                            Mark = 1.0,
                            TestId = 1L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            TestId = 2L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 9L,
                            DateCompleted = new DateTime(2023, 4, 3, 10, 47, 37, 314, DateTimeKind.Local).AddTicks(90),
                            Mark = 2.0,
                            TestId = 3L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            TestId = 4L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 11L,
                            DateCompleted = new DateTime(2023, 2, 8, 10, 9, 31, 39, DateTimeKind.Local).AddTicks(5950),
                            Mark = 3.0,
                            TestId = 5L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 12L,
                            TestId = 6L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 13L,
                            DateCompleted = new DateTime(2023, 3, 8, 1, 4, 4, 804, DateTimeKind.Local).AddTicks(7544),
                            Mark = 2.0,
                            TestId = 1L,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 14L,
                            TestId = 2L,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 15L,
                            DateCompleted = new DateTime(2022, 12, 10, 3, 57, 46, 575, DateTimeKind.Local).AddTicks(2195),
                            Mark = 2.0,
                            TestId = 3L,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 16L,
                            TestId = 4L,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 17L,
                            DateCompleted = new DateTime(2022, 11, 30, 5, 50, 50, 334, DateTimeKind.Local).AddTicks(3866),
                            Mark = 2.0,
                            TestId = 5L,
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("UserTestingApp.DAL.Entities.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Answer = "3",
                            Number = 1,
                            Question = "2 + 1 =",
                            TestId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Answer = "4",
                            Number = 1,
                            Question = "3 + 1 =",
                            TestId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Answer = "5",
                            Number = 2,
                            Question = "4 + 1 =",
                            TestId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            Answer = "6",
                            Number = 1,
                            Question = "5 + 1 =",
                            TestId = 3L
                        },
                        new
                        {
                            Id = 5L,
                            Answer = "7",
                            Number = 2,
                            Question = "6 + 1 =",
                            TestId = 3L
                        },
                        new
                        {
                            Id = 6L,
                            Answer = "8",
                            Number = 1,
                            Question = "7 + 1 =",
                            TestId = 4L
                        },
                        new
                        {
                            Id = 7L,
                            Answer = "9",
                            Number = 1,
                            Question = "8 + 1 =",
                            TestId = 5L
                        },
                        new
                        {
                            Id = 8L,
                            Answer = "10",
                            Number = 1,
                            Question = "9 + 1 =",
                            TestId = 6L
                        },
                        new
                        {
                            Id = 9L,
                            Answer = "11",
                            Number = 1,
                            Question = "10 + 1 =",
                            TestId = 7L
                        },
                        new
                        {
                            Id = 10L,
                            Answer = "12",
                            Number = 1,
                            Question = "11 + 1 =",
                            TestId = 8L
                        },
                        new
                        {
                            Id = 11L,
                            Answer = "13",
                            Number = 1,
                            Question = "12 + 1 =",
                            TestId = 9L
                        },
                        new
                        {
                            Id = 12L,
                            Answer = "14",
                            Number = 1,
                            Question = "13 + 1 =",
                            TestId = 10L
                        },
                        new
                        {
                            Id = 13L,
                            Answer = "15",
                            Number = 2,
                            Question = "14 + 1 =",
                            TestId = 10L
                        });
                });

            modelBuilder.Entity("UserTestingApp.DAL.Entities.Test", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "facere"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "cupiditate"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "tenetur"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "qui"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "doloribus"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "maiores"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "maiores"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "nemo"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "voluptate"
                        },
                        new
                        {
                            Id = 10L,
                            Name = "voluptates"
                        });
                });

            modelBuilder.Entity("UserTestingApp.DAL.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            PasswordHash = "7519580C03D32CD1F057FFAF49931124B10239EF574115EA5516C92CDD347B7F530A888BCB307637EED1BFC9FD34ECA78645BA8DDC9ECD5152C5CA1558B212BA",
                            Salt = "OJAhltlnFgZDK3UHjzncisJRiNwrg31opSmQm1H9LZuhD+bjhR9cR1RFOgAUDB3yP+M0j+aMm+ipPwW1pAd8zg==",
                            Username = "user2"
                        },
                        new
                        {
                            Id = 2L,
                            PasswordHash = "34A84DE7F8C3915BCC23490CB6C3AEC19BB233E4194A73FF8AECA1514D138481768E09DDBBF4ACDB02A8F0EDFC2AB7E761373FB34F1F2C9445593C41461897D9",
                            Salt = "OJAhltlnFgZDK3UHjzncisJRiNwrg31opSmQm1H9LZuhD+bjhR9cR1RFOgAUDB3yP+M0j+aMm+ipPwW1pAd8zg==",
                            Username = "user3"
                        },
                        new
                        {
                            Id = 3L,
                            PasswordHash = "1281D424C197862D09CE4F3621EACBB8E93FBAEC239F2BCB1E8E8C55EEC29B9FA631DDFF68D67BCF5FB98E8FCC11BD0DE6E4A5218D01077CD7270399E0AA907F",
                            Salt = "OJAhltlnFgZDK3UHjzncisJRiNwrg31opSmQm1H9LZuhD+bjhR9cR1RFOgAUDB3yP+M0j+aMm+ipPwW1pAd8zg==",
                            Username = "user4"
                        });
                });

            modelBuilder.Entity("UserTestingApp.DAL.Entities.AssignedTest", b =>
                {
                    b.HasOne("UserTestingApp.DAL.Entities.Test", "Test")
                        .WithMany("AssignedTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserTestingApp.DAL.Entities.User", "User")
                        .WithMany("Tests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserTestingApp.DAL.Entities.Task", b =>
                {
                    b.HasOne("UserTestingApp.DAL.Entities.Test", "Test")
                        .WithMany("Tasks")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("UserTestingApp.DAL.Entities.Test", b =>
                {
                    b.Navigation("AssignedTests");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("UserTestingApp.DAL.Entities.User", b =>
                {
                    b.Navigation("Tests");
                });
#pragma warning restore 612, 618
        }
    }
}
