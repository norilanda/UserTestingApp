// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserTestingApp.DAL.Context;

#nullable disable

namespace UserTestingApp.DAL.Migrations
{
    [DbContext(typeof(UserTestingAppContext))]
    [Migration("20231126152329_Seed-Data")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UserTestingApp.DAL.Entities.AssignedTest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Mark")
                        .HasColumnType("float");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("AssignedTests");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateCompleted = new DateTime(2023, 9, 11, 21, 28, 29, 846, DateTimeKind.Local).AddTicks(4499),
                            Mark = 2.0,
                            TestId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            TestId = 2L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            DateCompleted = new DateTime(2023, 7, 16, 7, 47, 39, 60, DateTimeKind.Local).AddTicks(5043),
                            Mark = 3.0,
                            TestId = 3L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            TestId = 4L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            DateCompleted = new DateTime(2023, 5, 18, 20, 29, 52, 277, DateTimeKind.Local).AddTicks(7308),
                            Mark = 1.0,
                            TestId = 5L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            TestId = 6L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            DateCompleted = new DateTime(2023, 5, 8, 1, 26, 30, 658, DateTimeKind.Local).AddTicks(6719),
                            Mark = 1.0,
                            TestId = 1L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            TestId = 2L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 9L,
                            DateCompleted = new DateTime(2023, 7, 24, 18, 46, 4, 828, DateTimeKind.Local).AddTicks(5935),
                            Mark = 3.0,
                            TestId = 3L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            TestId = 1L,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            DateCompleted = new DateTime(2023, 3, 9, 7, 10, 51, 704, DateTimeKind.Local).AddTicks(7832),
                            Mark = 3.0,
                            TestId = 2L,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 12L,
                            TestId = 3L,
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("UserTestingApp.DAL.Entities.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Answer = "3",
                            Number = 1,
                            Question = "2 + 1 =",
                            TestId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Answer = "4",
                            Number = 1,
                            Question = "3 + 1 =",
                            TestId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Answer = "5",
                            Number = 1,
                            Question = "4 + 1 =",
                            TestId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Answer = "6",
                            Number = 1,
                            Question = "5 + 1 =",
                            TestId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Answer = "7",
                            Number = 2,
                            Question = "6 + 1 =",
                            TestId = 4L
                        },
                        new
                        {
                            Id = 6L,
                            Answer = "8",
                            Number = 1,
                            Question = "7 + 1 =",
                            TestId = 5L
                        },
                        new
                        {
                            Id = 7L,
                            Answer = "9",
                            Number = 2,
                            Question = "8 + 1 =",
                            TestId = 5L
                        },
                        new
                        {
                            Id = 8L,
                            Answer = "10",
                            Number = 1,
                            Question = "9 + 1 =",
                            TestId = 6L
                        },
                        new
                        {
                            Id = 9L,
                            Answer = "11",
                            Number = 1,
                            Question = "10 + 1 =",
                            TestId = 7L
                        },
                        new
                        {
                            Id = 10L,
                            Answer = "12",
                            Number = 2,
                            Question = "11 + 1 =",
                            TestId = 7L
                        },
                        new
                        {
                            Id = 11L,
                            Answer = "13",
                            Number = 1,
                            Question = "12 + 1 =",
                            TestId = 8L
                        },
                        new
                        {
                            Id = 12L,
                            Answer = "14",
                            Number = 1,
                            Question = "13 + 1 =",
                            TestId = 9L
                        },
                        new
                        {
                            Id = 13L,
                            Answer = "15",
                            Number = 2,
                            Question = "14 + 1 =",
                            TestId = 9L
                        },
                        new
                        {
                            Id = 14L,
                            Answer = "16",
                            Number = 1,
                            Question = "15 + 1 =",
                            TestId = 10L
                        },
                        new
                        {
                            Id = 15L,
                            Answer = "17",
                            Number = 2,
                            Question = "16 + 1 =",
                            TestId = 10L
                        });
                });

            modelBuilder.Entity("UserTestingApp.DAL.Entities.Test", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "expedita"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "delectus"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "laboriosam"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "et"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "est"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "quaerat"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "quia"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "voluptatem"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "nesciunt"
                        },
                        new
                        {
                            Id = 10L,
                            Name = "quidem"
                        });
                });

            modelBuilder.Entity("UserTestingApp.DAL.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            PasswordHash = "6BADBF3C5842C748C4F30513DFA5F20E4232CAC44531FA0FA95D42D0C04AC53C22E746A9E2E19AC1B51BF6BE2628202449F8BC4163A0C0FECF5DED8654B4203A",
                            Salt = "vEUXIxlvdvOfWB3rHBkCqhhcADEQv96KACIOWYfFAwgmsYPVExj6i859J/4B9LFPnj4683Q3lBM0267m0ROpug==",
                            Username = "user2"
                        },
                        new
                        {
                            Id = 2L,
                            PasswordHash = "302AECE75676893D130FD93E28666BCCA91F14222BBD26EDC79D6E6355A5FBA2CF3F79296FCCB94ACE016A491AC1D89C460FC823D568004DF28752EEC266BD03",
                            Salt = "vEUXIxlvdvOfWB3rHBkCqhhcADEQv96KACIOWYfFAwgmsYPVExj6i859J/4B9LFPnj4683Q3lBM0267m0ROpug==",
                            Username = "user3"
                        },
                        new
                        {
                            Id = 3L,
                            PasswordHash = "AC5ACFF90B2C8FC1FACBE05703956C7AA5084DEB19FCEB0D4F9402817C89826DDB9610F27A7F54BEC9DDBAC303697B032CB3025636D5AA2C9887950C594BBA68",
                            Salt = "vEUXIxlvdvOfWB3rHBkCqhhcADEQv96KACIOWYfFAwgmsYPVExj6i859J/4B9LFPnj4683Q3lBM0267m0ROpug==",
                            Username = "user4"
                        });
                });

            modelBuilder.Entity("UserTestingApp.DAL.Entities.AssignedTest", b =>
                {
                    b.HasOne("UserTestingApp.DAL.Entities.Test", "Test")
                        .WithMany("AssignedTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserTestingApp.DAL.Entities.User", "User")
                        .WithMany("Tests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserTestingApp.DAL.Entities.Task", b =>
                {
                    b.HasOne("UserTestingApp.DAL.Entities.Test", "Test")
                        .WithMany("Tasks")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("UserTestingApp.DAL.Entities.Test", b =>
                {
                    b.Navigation("AssignedTests");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("UserTestingApp.DAL.Entities.User", b =>
                {
                    b.Navigation("Tests");
                });
#pragma warning restore 612, 618
        }
    }
}
